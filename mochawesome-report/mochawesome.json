{
  "stats": {
    "suites": 6,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-26T08:04:37.763Z",
    "end": "2019-03-26T08:04:55.801Z",
    "duration": 18038,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "66ce865f-0d22-4146-b39b-dd92df840c22",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "c14439f6-c237-4987-ba31-16f98b5dba9e",
        "title": "Mocha is a test framework and chai is the assertion library",
        "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
        "file": "\\src\\test\\main-test-engine.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: Launching the home page",
            "fullTitle": "Mocha is a test framework and chai is the assertion library \"before all\" hook: Launching the home page",
            "timedOut": false,
            "duration": 7254,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "a407f6f9-97ba-4899-930e-bc77457d56fb",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: Logout LMS application",
            "fullTitle": "Mocha is a test framework and chai is the assertion library \"after all\" hook: Logout LMS application",
            "timedOut": false,
            "duration": 3309,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "512c014d-940c-4cae-848f-d9105e503c6d",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verifying the homepage title",
            "fullTitle": "Mocha is a test framework and chai is the assertion library Verifying the homepage title",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "84c962c9-d334-4f03-8628-868facb586ed",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "3e6faa3b-cd50-47fb-bbb9-a2cf3110eb20",
            "title": "login-page",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Enter User Name and password",
                "fullTitle": "Mocha is a test framework and chai is the assertion library login-page Enter User Name and password",
                "timedOut": false,
                "duration": 194,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "1c5b07c7-d001-4c66-8932-00c1945bbe03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Login to LMS",
                "fullTitle": "Mocha is a test framework and chai is the assertion library login-page Login to LMS",
                "timedOut": false,
                "duration": 470,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "53690ab9-9c5f-4244-bacc-ee25df136803",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Validate Login",
                "fullTitle": "Mocha is a test framework and chai is the assertion library login-page Validate Login",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "e438c734-d759-43b6-a34f-e4a8fe1b6e52",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1c5b07c7-d001-4c66-8932-00c1945bbe03",
              "53690ab9-9c5f-4244-bacc-ee25df136803",
              "e438c734-d759-43b6-a34f-e4a8fe1b6e52"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 707,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "7d0a38c2-4e21-46b3-ab03-0940698cfb79",
            "title": "absence-details",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Navigate to absence details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library absence-details Navigate to absence details",
                "timedOut": false,
                "duration": 613,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "74805cb5-99e3-4563-b1b3-7c4fd9d5555d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get Row Count",
                "fullTitle": "Mocha is a test framework and chai is the assertion library absence-details Get Row Count",
                "timedOut": false,
                "duration": 960,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "5cc03c5f-1e62-4746-b625-087b82d01929",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "74805cb5-99e3-4563-b1b3-7c4fd9d5555d",
              "5cc03c5f-1e62-4746-b625-087b82d01929"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1573,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "145415ad-f54e-4899-8f7b-86bea543a429",
            "title": "leave-balance",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Navigate to Leave Balance Details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library leave-balance Navigate to Leave Balance Details",
                "timedOut": false,
                "duration": 241,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "90ed3439-13f2-4074-9e96-d4b3b7a4273d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Capture Leave Balance Details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library leave-balance Capture Leave Balance Details",
                "timedOut": false,
                "duration": 818,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "064b02f9-19aa-41b9-94e4-dd6729bb11b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "90ed3439-13f2-4074-9e96-d4b3b7a4273d",
              "064b02f9-19aa-41b9-94e4-dd6729bb11b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1059,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "734460ca-a7cb-4693-b064-3aced986b43c",
            "title": "apply-leaves",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Navigate to Apply Leave",
                "fullTitle": "Mocha is a test framework and chai is the assertion library apply-leaves Navigate to Apply Leave",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "816ea3cf-9642-4716-8a12-23f819f17fc6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Enter Leave Details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library apply-leaves Enter Leave Details",
                "timedOut": false,
                "duration": 636,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "d8ca0580-bffd-4a43-b16d-edeaa887c81f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Wait for total duration value",
                "fullTitle": "Mocha is a test framework and chai is the assertion library apply-leaves Wait for total duration value",
                "timedOut": false,
                "duration": 3138,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "2e8dcc1b-196e-45f3-9a86-73a4a7e24af0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "816ea3cf-9642-4716-8a12-23f819f17fc6",
              "d8ca0580-bffd-4a43-b16d-edeaa887c81f",
              "2e8dcc1b-196e-45f3-9a86-73a4a7e24af0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4045,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "c9ea7990-136b-4fcd-9583-69c61af153fb",
            "title": "mongoDB-find",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "MongoDB get recordset",
                "fullTitle": "Mocha is a test framework and chai is the assertion library mongoDB-find MongoDB get recordset",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "3f8454ec-efa7-4d8f-b998-4414f2a349f2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "MongoDB delete recordset",
                "fullTitle": "Mocha is a test framework and chai is the assertion library mongoDB-find MongoDB delete recordset",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "99557fb7-97ed-44d9-b507-32e6de6e4dc4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "MongoDB update recordset",
                "fullTitle": "Mocha is a test framework and chai is the assertion library mongoDB-find MongoDB update recordset",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "012026a7-68ed-431f-90a2-6d1b5cf8fc9d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3f8454ec-efa7-4d8f-b998-4414f2a349f2",
              "99557fb7-97ed-44d9-b507-32e6de6e4dc4",
              "012026a7-68ed-431f-90a2-6d1b5cf8fc9d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          }
        ],
        "passes": [
          "84c962c9-d334-4f03-8628-868facb586ed"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 15,
        "root": false,
        "rootEmpty": false,
        "_timeout": 100000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 100000
  },
  "copyrightYear": 2019
}