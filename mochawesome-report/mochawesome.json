{
  "stats": {
    "suites": 6,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-26T07:43:04.213Z",
    "end": "2019-03-26T07:43:23.404Z",
    "duration": 19191,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "34f397c2-946e-498a-b0fb-a3c592778be8",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "ff1f123f-9cd1-4fc0-90a3-48fe0d850c24",
        "title": "Mocha is a test framework and chai is the assertion library",
        "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
        "file": "\\src\\test\\main-test-engine.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: Launching the home page",
            "fullTitle": "Mocha is a test framework and chai is the assertion library \"before all\" hook: Launching the home page",
            "timedOut": false,
            "duration": 7670,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "797b1e4e-6e39-4ef7-9c2b-0f23e0c19366",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: Logout LMS application",
            "fullTitle": "Mocha is a test framework and chai is the assertion library \"after all\" hook: Logout LMS application",
            "timedOut": false,
            "duration": 3505,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "f981ed40-8cfa-46d9-a819-910c0ad6ef43",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verifying the homepage title",
            "fullTitle": "Mocha is a test framework and chai is the assertion library Verifying the homepage title",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "ec904295-aebf-4875-bdbe-917da495b000",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "334a1784-2cc1-442c-97b3-4efa5784221c",
            "title": "login-page",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Enter User Name and password",
                "fullTitle": "Mocha is a test framework and chai is the assertion library login-page Enter User Name and password",
                "timedOut": false,
                "duration": 196,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "15ef1620-f541-486f-9dcb-87c918b84e42",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Login to LMS",
                "fullTitle": "Mocha is a test framework and chai is the assertion library login-page Login to LMS",
                "timedOut": false,
                "duration": 519,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "b746b2e7-48ab-4498-b06b-9a2051d7d830",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Validate Login",
                "fullTitle": "Mocha is a test framework and chai is the assertion library login-page Validate Login",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "d4a23249-7a98-40e5-92fb-205d1f5b506a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "15ef1620-f541-486f-9dcb-87c918b84e42",
              "b746b2e7-48ab-4498-b06b-9a2051d7d830",
              "d4a23249-7a98-40e5-92fb-205d1f5b506a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 777,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "fd3764ca-8486-415c-be6e-a05480cde93e",
            "title": "absence-details",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Navigate to absence details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library absence-details Navigate to absence details",
                "timedOut": false,
                "duration": 602,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "c7894636-3700-4e05-8bc9-feeded171dc2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get Row Count",
                "fullTitle": "Mocha is a test framework and chai is the assertion library absence-details Get Row Count",
                "timedOut": false,
                "duration": 970,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "aceb2209-f195-4286-b416-60f229b2db14",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c7894636-3700-4e05-8bc9-feeded171dc2",
              "aceb2209-f195-4286-b416-60f229b2db14"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1572,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "ad7ee67d-de4b-419f-bacd-f10a84962dad",
            "title": "leave-balance",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Navigate to Leave Balance Details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library leave-balance Navigate to Leave Balance Details",
                "timedOut": false,
                "duration": 470,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "5ed848d8-11c3-4b67-a5b5-564b349937e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Capture Leave Balance Details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library leave-balance Capture Leave Balance Details",
                "timedOut": false,
                "duration": 861,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "5a54187e-7be9-491b-bc41-0cec183b7269",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5ed848d8-11c3-4b67-a5b5-564b349937e5",
              "5a54187e-7be9-491b-bc41-0cec183b7269"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1331,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "e5a78a9d-11ff-43ad-b00d-961f1b4cdfec",
            "title": "apply-leaves",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Navigate to Apply Leave",
                "fullTitle": "Mocha is a test framework and chai is the assertion library apply-leaves Navigate to Apply Leave",
                "timedOut": false,
                "duration": 249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "ceb97309-06f8-4fb3-bd58-9d9803771edd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Enter Leave Details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library apply-leaves Enter Leave Details",
                "timedOut": false,
                "duration": 690,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "a4be8eaa-974d-4e25-8730-f87c470c8649",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Wait for total duration value",
                "fullTitle": "Mocha is a test framework and chai is the assertion library apply-leaves Wait for total duration value",
                "timedOut": false,
                "duration": 3322,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "1bcc5ac8-a1f3-4aa0-a9ce-f2a0e9711567",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ceb97309-06f8-4fb3-bd58-9d9803771edd",
              "a4be8eaa-974d-4e25-8730-f87c470c8649",
              "1bcc5ac8-a1f3-4aa0-a9ce-f2a0e9711567"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4261,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "d7e3a164-8637-4a9e-8468-64ab3b758293",
            "title": "mongoDB-find",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "MongoDB get recordset",
                "fullTitle": "Mocha is a test framework and chai is the assertion library mongoDB-find MongoDB get recordset",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "6a293913-e495-41c4-98a5-5c5237478736",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "MongoDB delete recordset",
                "fullTitle": "Mocha is a test framework and chai is the assertion library mongoDB-find MongoDB delete recordset",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "ed12f903-80a6-4615-a73f-f9608d42cd38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "MongoDB update recordset",
                "fullTitle": "Mocha is a test framework and chai is the assertion library mongoDB-find MongoDB update recordset",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "af1da339-5688-4107-be33-b5fdc225b2b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a293913-e495-41c4-98a5-5c5237478736",
              "ed12f903-80a6-4615-a73f-f9608d42cd38",
              "af1da339-5688-4107-be33-b5fdc225b2b3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          }
        ],
        "passes": [
          "ec904295-aebf-4875-bdbe-917da495b000"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 9,
        "root": false,
        "rootEmpty": false,
        "_timeout": 100000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 100000
  },
  "copyrightYear": 2019
}