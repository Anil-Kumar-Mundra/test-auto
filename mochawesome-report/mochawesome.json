{
  "stats": {
    "suites": 6,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-26T06:31:23.752Z",
    "end": "2019-03-26T06:31:43.055Z",
    "duration": 19303,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "a805d33e-b0e8-42f5-a52e-53124c94fdeb",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "d350402b-0af3-4066-ad8b-9852a7ee6c98",
        "title": "Mocha is a test framework and chai is the assertion library",
        "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
        "file": "\\src\\test\\main-test-engine.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: Launching the home page",
            "fullTitle": "Mocha is a test framework and chai is the assertion library \"before all\" hook: Launching the home page",
            "timedOut": false,
            "duration": 7085,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "bc8b8840-dd3a-4b44-910a-4c461f509171",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: Logout LMS application",
            "fullTitle": "Mocha is a test framework and chai is the assertion library \"after all\" hook: Logout LMS application",
            "timedOut": false,
            "duration": 3359,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "0c9b6393-f8ac-4f35-92e4-bce37f8855d1",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Verifying the homepage title",
            "fullTitle": "Mocha is a test framework and chai is the assertion library Verifying the homepage title",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "a3d5ffc0-4044-4d15-a894-99d8ca847aed",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "91539ee1-8fc0-4481-ae27-0198b4b4d19f",
            "title": "login-page",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Enter User Name and password",
                "fullTitle": "Mocha is a test framework and chai is the assertion library login-page Enter User Name and password",
                "timedOut": false,
                "duration": 228,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "f400c63f-2bc3-42bd-b023-37d595c46820",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Login to LMS",
                "fullTitle": "Mocha is a test framework and chai is the assertion library login-page Login to LMS",
                "timedOut": false,
                "duration": 628,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "661566b7-687a-415a-8de3-c7b666887c53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Validate Login",
                "fullTitle": "Mocha is a test framework and chai is the assertion library login-page Validate Login",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "53acdf80-ca31-43c2-9215-593d13f3106a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f400c63f-2bc3-42bd-b023-37d595c46820",
              "661566b7-687a-415a-8de3-c7b666887c53",
              "53acdf80-ca31-43c2-9215-593d13f3106a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 950,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "e2331874-48fa-4b49-b583-a073c89a1db4",
            "title": "absence-details",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Navigate to absence details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library absence-details Navigate to absence details",
                "timedOut": false,
                "duration": 635,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "e7f5fa7c-68d5-4b53-98d7-e95724cccdb7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get Row Count",
                "fullTitle": "Mocha is a test framework and chai is the assertion library absence-details Get Row Count",
                "timedOut": false,
                "duration": 1151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "fbd02655-2e02-43d9-9406-9d06af046bc5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e7f5fa7c-68d5-4b53-98d7-e95724cccdb7",
              "fbd02655-2e02-43d9-9406-9d06af046bc5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1786,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "3744fef1-009a-4715-95a7-034782aee1e4",
            "title": "leave-balance",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Navigate to Leave Balance Details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library leave-balance Navigate to Leave Balance Details",
                "timedOut": false,
                "duration": 313,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "7b770cad-2004-4b01-956c-b857dcc0db6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Capture Leave Balance Details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library leave-balance Capture Leave Balance Details",
                "timedOut": false,
                "duration": 1032,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "df8b35d6-7022-4551-9ec4-340620aa033f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7b770cad-2004-4b01-956c-b857dcc0db6c",
              "df8b35d6-7022-4551-9ec4-340620aa033f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1345,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "643e34bd-9d71-474c-9144-8b0da5592e86",
            "title": "apply-leaves",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Navigate to Apply Leave",
                "fullTitle": "Mocha is a test framework and chai is the assertion library apply-leaves Navigate to Apply Leave",
                "timedOut": false,
                "duration": 351,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "6d1d4f7e-c0c4-4300-9768-509bdc1320bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Enter Leave Details",
                "fullTitle": "Mocha is a test framework and chai is the assertion library apply-leaves Enter Leave Details",
                "timedOut": false,
                "duration": 1258,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "b00ad350-45c7-4124-8591-f213e27ad7ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Wait for total duration value",
                "fullTitle": "Mocha is a test framework and chai is the assertion library apply-leaves Wait for total duration value",
                "timedOut": false,
                "duration": 3090,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "3b4a7874-9e8c-47a8-adc0-c1ba204828ed",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6d1d4f7e-c0c4-4300-9768-509bdc1320bf",
              "b00ad350-45c7-4124-8591-f213e27ad7ad",
              "3b4a7874-9e8c-47a8-adc0-c1ba204828ed"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4699,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          },
          {
            "uuid": "e3b84eea-24d5-418b-a3ee-d2f66256ad32",
            "title": "mongoDB-find",
            "fullFile": "D:\\newJSTestAutomation\\testAuomationWithJS\\src\\test\\main-test-engine.js",
            "file": "\\src\\test\\main-test-engine.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "MongoDB get recordset",
                "fullTitle": "Mocha is a test framework and chai is the assertion library mongoDB-find MongoDB get recordset",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "cb860f7c-bf3a-417d-96cf-ae0a9faba99c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "MongoDB delete recordset",
                "fullTitle": "Mocha is a test framework and chai is the assertion library mongoDB-find MongoDB delete recordset",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "902eb56a-b7f6-4c7d-b570-bdbd9d266952",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "MongoDB update recordset",
                "fullTitle": "Mocha is a test framework and chai is the assertion library mongoDB-find MongoDB update recordset",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
                "err": {},
                "isRoot": false,
                "uuid": "9cbd0e1c-b9d4-42b0-ae20-481829cbaf5c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cb860f7c-bf3a-417d-96cf-ae0a9faba99c",
              "902eb56a-b7f6-4c7d-b570-bdbd9d266952",
              "9cbd0e1c-b9d4-42b0-ae20-481829cbaf5c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 100000
          }
        ],
        "passes": [
          "a3d5ffc0-4044-4d15-a894-99d8ca847aed"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 10,
        "root": false,
        "rootEmpty": false,
        "_timeout": 100000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 100000
  },
  "copyrightYear": 2019
}